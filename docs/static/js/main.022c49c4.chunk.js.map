{"version":3,"sources":["components/camera.svg","components/BingoSheetView/index.tsx","models/slot.ts","models/sheet.ts","context/BingoSheet.ts","services/Detector.ts","components/Capture/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BingoSheetCell","slot","className","cn","punched","bingo","label","split","map","line","i","key","BingoSheetRow","row","BingoSheetView","sheet","isBingo","slots","BingoSlot","value","description","imageURL","position","x","y","BingoSheet","width","height","length","this","payload","flat","find","hit","filter","getBingo","concat","getHorizontalBingo","getVerticalBingo","getDiagonalBingo","markSlotsIfBingo","every","col","len","Math","min","backslash","slash","arr","j","floor","random","dest","push","arrayShuffle","variation","index","config","Array","fill","getShuffledListWithLength","variations","v","createSlot","BingoSheetContext","createContext","create","punch","data","detectQRCodeFromImageURL","Promise","resolve","img","Image","src","onload","canvas","document","createElement","ctx","getContext","drawImage","qrcode","jsqr","getImageData","CaptureView","pushLog","input","useRef","useState","imgURL","setImageURL","alt","onClick","current","click","camera","ref","type","accept","capture","onChange","target","files","f","r","FileReader","a","result","JSON","parse","readAsDataURL","LogListItemView","log","stringify","Content","Consumer","App","logs","setLog","updateBingo","Provider","reverse","timestamp","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.022c49c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/camera.2723d63e.svg\";","import React from 'react';\n\nimport cn from 'classnames';\n\nimport BingoSheet from \"../../models/sheet\";\nimport BingoSlot from '../../models/slot';\nimport './index.scss';\n\nconst BingoSheetCell: React.FC<{slot: BingoSlot}> = ({slot}) => {\n    return (\n        <div className={cn(\"sheet-cell\", { punched: slot.punched, bingo: slot.bingo })}>\n            {slot.label.split(\"\\n\").map((line, i) => <div key={i}>{line}</div>)}\n        </div>\n    );\n};\n\nconst BingoSheetRow: React.FC<{row: BingoSlot[]}> = ({row}) => {\n    return (\n        <div className=\"sheet-row\">\n            {row.map((slot, i) => <BingoSheetCell key={i} slot={slot} />)}\n        </div>\n    );\n};\n\nconst BingoSheetView: React.FC<{sheet: BingoSheet}> = ({sheet}) => {\n    return (\n        <div className={cn(\"sheet-wrapper\", { bingo: sheet.isBingo() })}>\n            {sheet.slots.map((row, i) => <BingoSheetRow key={i} row={row} />)}\n        </div>\n    );\n};\n\nexport default BingoSheetView;\n","\nexport interface IBingoSlotConfig {\n    value: string;\n    label: string;\n    description?: string;\n    imageURL?: string;\n}\n\nexport default class BingoSlot {\n    constructor(\n        public value: string,\n        public label: string,\n        public description: string = \"\",\n        public imageURL: string = \"\",\n        public position: {\n            x: number,\n            y: number\n        } = { x: 0, y: 0 },\n        public punched: boolean = false,\n        public bingo: boolean = false,\n    ) {}\n}","import BingoSlot, { IBingoSlotConfig } from './slot';\nimport { Payload } from './qrcode';\n\nexport interface IBingoConfig {\n    sheet: {\n        width: number;\n        height: number;\n    };\n    slot: {\n        variations: IBingoSlotConfig[];\n    }\n}\n\nexport default class BingoSheet {\n\n    public length: number;\n\n    constructor(\n        public width: number,\n        public height: number,\n        public slots: BingoSlot[][]\n    ) {\n        this.length = width * height;\n    }\n\n    private static arrayShuffle<T>(arr: T[]): T[] {\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    }\n\n    private static getShuffledListWithLength(arr: IBingoSlotConfig[], length: number): IBingoSlotConfig[] {\n        const dest: IBingoSlotConfig[] = [];\n        while (dest.length < length) {\n            dest.push(...this.arrayShuffle<IBingoSlotConfig>(arr))\n        }\n        return dest;\n    }\n\n    private static createSlot(variation: IBingoSlotConfig, index: number, width: number): BingoSlot {\n        const { value, label, description, imageURL } = variation;\n        const [x, y] = [index % width, Math.floor(index / width)];\n        return new BingoSlot(value, label, description, imageURL, { x, y });\n    }\n\n    static create(config: IBingoConfig): BingoSheet {\n        const {width, height} = config.sheet;\n        const slots: BingoSlot[][] = Array(height).fill(true).map(() => []);\n        const length = width * height;\n        this.getShuffledListWithLength(config.slot.variations, length).map((v, i) => {\n            const slot = this.createSlot(v, i, width);\n            return slots[slot.position.y].push(slot);\n        });\n        return new BingoSheet(config.sheet.width, config.sheet.height, slots);\n    }\n\n    /**\n     * hit returns the slot which matches the given payload,\n     * or undefined if not found.\n     * @param payload\n     */\n    public hit(payload: Payload): BingoSlot | void {\n        // eslint-disable-next-line\n        return this.slots.flat().find((slot) => slot.value === payload.value);\n    }\n\n    /**\n     * punch marks the given hit slot as punched.\n     * @param hit\n     */\n    public punch(hit: BingoSlot): BingoSheet {\n        // eslint-disable-next-line\n        this.slots.flat().filter((slot) => slot.value === hit.value).map((slot) => {\n            // slot.punched = true;\n            const {x, y} = slot.position;\n            this.slots[y][x].punched = true;\n        });\n        return this;\n    }\n\n    public isBingo(): boolean {\n        return this.getBingo().length !== 0;\n    }\n\n    public getBingo(): BingoSlot[] {\n        let bingo: BingoSlot[] = [];\n        bingo = bingo.concat(this.getHorizontalBingo());\n        bingo = bingo.concat(this.getVerticalBingo());\n        bingo = bingo.concat(this.getDiagonalBingo());\n        this.markSlotsIfBingo(bingo);\n        return bingo;\n    }\n\n    private markSlotsIfBingo(bingo: BingoSlot[]) {\n        bingo.map((slot) => this.slots[slot.position.y][slot.position.x].bingo = true);\n    }\n\n    /**\n     * Return all the slots which constitute the horizontal bingo.\n     */\n    public getHorizontalBingo(): BingoSlot[] {\n        for (let row = 0; row < this.height; row++) {\n            if (this.slots[row].every((slot) => slot.punched)) {\n                return this.slots[row];\n            }\n        }\n        return [];\n    }\n\n    /**\n     * Return all the slots which constitute the vertical bingo.\n     */\n    public getVerticalBingo(): BingoSlot[] {\n        for (let col = 0; col < this.width; col++) {\n            if (this.slots.every((row) => row[col].punched)) {\n                return this.slots.map((row) => row[col]).flat();\n            }\n        }\n        return [];\n    }\n\n    /**\n     * Return all the slots which constitute the diagonal bingo.\n     */\n    public getDiagonalBingo(): BingoSlot[] {\n        let bingo: BingoSlot[] = [];\n        if (this.width === this.height) {\n            const len = Math.min(this.width, this.height);\n            const backslash = this.slots.map((row, i) => row[i]);\n            if (backslash.every(slot => slot.punched)) {\n                bingo = bingo.concat(backslash);\n            }\n            const slash = this.slots.map((row, i) => row[len - i - 1]);\n            if (slash.every(slot => slot.punched)) {\n                bingo = bingo.concat(slash);\n            }\n        } else {\n            // TODO: Consider NON-SQUARE bingo sheet.\n            return [];\n        }\n        return bingo;\n    }\n}","import { createContext } from \"react\";\nimport BingoSheet from \"../models/sheet\";\nimport config from \"../config.json\";\nimport { QRCodeData } from \"../models/qrcode\";\n\nconst BingoSheetContext = createContext({\n    bingo: {\n        sheet: BingoSheet.create(config.bingo),\n    },\n    punch(data: QRCodeData) {}\n});\n\nexport default BingoSheetContext;\n","import jsqr, { QRCode } from 'jsqr';\n\nexport function detectQRCodeFromVideo({video, canvas}: {video: HTMLVideoElement | null, canvas: HTMLCanvasElement | null}): QRCode | null {\n    if (!canvas) return null;\n    if (!video) return null;\n    const stream = video.srcObject;\n    if (!stream) return null;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return null;\n    ctx.drawImage(video, 0, 0, video.width, video.height);\n    const img = ctx.getImageData(0, 0, video.width, video.height);\n    return jsqr(img.data, video.width, video.height);\n}\n\nexport function detectQRCodeFromImageURL(imageURL: string): Promise<QRCode | null> {\n    return new Promise((resolve) => {\n        const img = new Image();\n        img.src = imageURL;\n        img.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            [canvas.width, canvas.height] = [img.width, img.height];\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) return;\n            ctx.drawImage(img, 0, 0);\n            const qrcode = jsqr(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height);\n            resolve(qrcode);\n        };\n    });\n}","import React, { useState, useRef } from 'react';\nimport DebugLog from '../../debug/DebugLog';\n\nimport camera from '../camera.svg';\nimport './index.scss';\nimport { detectQRCodeFromImageURL } from '../../services/Detector';\nimport { QRCodeData } from '../../models/qrcode';\n\nconst CaptureView: React.FC<{\n    pushLog: (log: DebugLog) => void,\n    punch: (data: QRCodeData) => void,\n}> = ({ pushLog, punch }) => {\n    const input = useRef<HTMLInputElement>(null);\n    const [imgURL, setImageURL] = useState<string>(\"\");\n    const onChangeImage = ({ target }: { target: HTMLInputElement }) => {\n        if (!target.files || !target.files.length) return setImageURL(\"\"); // Image not set.\n        const f = target.files[0];\n        const r = new FileReader();\n        r.onload = async () => {\n            setImageURL(r.result as string);\n            const qrcode = await detectQRCodeFromImageURL(r.result as string);\n            if (!qrcode) return; // QR code not detected.\n            const data = JSON.parse(qrcode.data) as QRCodeData;\n            punch(data);\n        };\n        r.readAsDataURL(f);\n    };\n    const openCaptureScreen = () => input.current && input.current.click();\n    return (\n        <div className=\"capture-trigger-wrapper\">\n            <div className=\"capture-result-container\">\n                {imgURL ? <img src={imgURL} alt='Captured' /> : null}\n            </div>\n            <div\n                className=\"capture-trigger-container\"\n                onClick={openCaptureScreen}\n            >\n                <img src={camera} alt=\"Capture QR code!\" />\n            </div>\n            <input\n                ref={input}\n                type=\"file\"\n                accept=\"image/*\"\n                capture\n                onChange={onChangeImage}\n            />\n        </div>\n    );\n}\n\nexport default CaptureView;\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport BingoSheetView from './components/BingoSheetView';\nimport DebugLog from './debug/DebugLog';\n\nimport BingoSheet from \"./models/sheet\";\nimport config from \"./config.json\";\n\nimport BingoSheetContext from './context/BingoSheet';\nimport CaptureView from './components/Capture';\nimport { QRCodeData } from './models/qrcode';\n\nconst LogListItemView: React.FC<{log: DebugLog}> = ({log}) => {\n  return (\n    <li>{JSON.stringify(log)}</li>\n  );\n}\n\nconst Content: React.FC<{ pushLog: (log: DebugLog) => void }> = ({ pushLog }) => {\n  return (\n    <BingoSheetContext.Consumer>\n      {({bingo, punch}) => <div className=\"App\">\n        <BingoSheetView sheet={bingo.sheet} />\n        <CaptureView pushLog={pushLog} punch={punch} />\n      </div>\n      }\n    </BingoSheetContext.Consumer>\n  );\n};\n\nconst App: React.FC = () => {\n\n  const [logs, setLog] = useState([] as DebugLog[]);\n  const pushLog = (log: DebugLog) => setLog(logs.concat(log));\n\n  const [bingo, updateBingo] = useState({sheet: BingoSheet.create(config.bingo)});\n  const punch = (data: QRCodeData) => {\n    const slot = bingo.sheet.hit(data.payload);\n    if (!slot) return; // TODO: do something\n    updateBingo({ sheet: bingo.sheet.punch(slot) });\n  };\n\n  return (\n    <BingoSheetContext.Provider value={{bingo, punch}}>\n      <Content pushLog={pushLog} />\n      <div>\n        <ul>{logs.reverse().map(log => <LogListItemView key={log.timestamp} log={log} />)}</ul>\n      </div>\n    </BingoSheetContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}