{"version":3,"sources":["components/camera.svg","components/BingoSheetView/index.tsx","debug/DebugLog.ts","components/Scanner.tsx","services/Detector.ts","models/slot.ts","models/sheet.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BingoSheetCell","slot","className","cn","punched","label","split","map","line","i","key","BingoSheetRow","row","BingoSheetView","sheet","slots","DebugLog","type","message","timestamp","Date","now","ScannButton","setStream","startScanProcess","a","navigator","mediaDevices","getUserMedia","audio","video","width","height","stream","onClick","src","camera","alt","Scanner","detectorInterval","pushLog","useState","scanning","setScanStatus","useRef","canvas","detect","qrcode","srcObject","ctx","getContext","drawImage","img","getImageData","jsqr","data","detectQRCodeFromVideo","current","clearInterval","style","display","JSON","parse","console","log","err","error","ref","autoPlay","setInterval","BingoSlot","value","description","imageURL","position","x","y","BingoSheet","length","this","arr","j","Math","floor","random","dest","push","arrayShuffle","variation","index","config","Array","fill","getShuffledListWithLength","variations","v","createSlot","LogListItemView","stringify","App","create","bingo","logs","setLog","concat","reverse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64e9cc8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/camera.2723d63e.svg\";","import React from 'react';\n\nimport cn from 'classnames';\n\nimport BingoSheet from \"../../models/sheet\";\nimport BingoSlot from '../../models/slot';\nimport './index.css';\n\nconst BingoSheetCell: React.FC<{slot: BingoSlot}> = ({slot}) => {\n    return (\n        <div className={cn(\"sheet-cell\", {punched: slot.punched})}>\n            {slot.label.split(\"\\n\").map((line, i) => <div key={i}>{line}</div>)}\n        </div>\n    );\n};\n\nconst BingoSheetRow: React.FC<{row: BingoSlot[]}> = ({row}) => {\n    return (\n        <div className=\"sheet-row\">\n            {row.map((slot, i) => <BingoSheetCell key={i} slot={slot} />)}\n        </div>\n    );\n};\n\nconst BingoSheetView: React.FC<{sheet: BingoSheet}> = ({sheet}) => {\n    return (\n        <div className=\"sheet-wrapper\">\n            {sheet.slots.map((row, i) => <BingoSheetRow key={i} row={row} />)}\n        </div>\n    );\n};\n\nexport default BingoSheetView;\n","\nexport default class DebugLog {\n    constructor(public type: string = \"debug\", public message = \"ok\", public timestamp = Date.now()) {\n    }\n}","import React, { useRef, useState } from 'react';\nimport DebugLog from '../debug/DebugLog';\nimport './Scanner.css';\nimport camera from './camera.svg';\n\nimport {detectQRCodeFromVideo} from '../services/Detector'\n\n// Video size\nconst vh = 320;\nconst vw = 320;\n\nconst ScannButton: React.FC<{ setStream: (stream: MediaStream) => void }> = ({ setStream }) => {\n    const startScanProcess = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({audio: false, video: {width: vw, height: vh}});\n        setStream(stream);\n    };\n    return (\n        <div className=\"Scan-Button-Wrapper\" onClick={startScanProcess} >\n            <img src={camera} width={80} alt=\"Start Scanning\" />\n        </div>\n    )\n}\n\nconst Scanner: React.FC<{pushLog: (log: DebugLog) => void}> = ({pushLog}) => {\n\n    const [scanning, setScanStatus] = useState(false);\n\n    // To show what is to be detected.\n    const video: React.RefObject<HTMLVideoElement> = useRef(null);\n    // We need to render the stream to get an ImageData to detect QR code.\n    const canvas: React.RefObject<HTMLCanvasElement> = useRef(null);\n\n    let detectorInterval: NodeJS.Timeout;\n    const detect = () => {\n        const qrcode = detectQRCodeFromVideo({ video: video.current, canvas: canvas.current });\n        if (!qrcode) return;\n        setScanStatus(false);\n        clearInterval(detectorInterval);\n        (video.current as HTMLVideoElement).style.display = 'none';\n        pushLog(new DebugLog(\"detected\", qrcode.data));\n        try {\n            const data = JSON.parse(qrcode.data);\n            console.log(data);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const setStream = (stream: MediaStream) => {\n        (video.current as HTMLVideoElement).style.display = 'block';\n        if (!video.current) return;\n        video.current.srcObject = stream;\n        detectorInterval = setInterval(detect, 1000);\n        setScanStatus(true);\n    };\n\n    return (\n        <div className=\"Scanner\">\n            <div className=\"video-wrapper\">\n                <video\n                    width={vw} height={vh}\n                    ref={video} autoPlay={true}\n                />\n                <div className=\"code-area\" />\n                <canvas\n                    className=\"capture-canvas\"\n                    ref={canvas}\n                    width={vw} height={vh}\n                />\n                {scanning ? null : <ScannButton setStream={setStream} />}\n            </div>\n            {/* <button onClick={() => pushLog(new DebugLog())}>Debug</button> */}\n        </div>\n    );\n}\n\nexport default Scanner;\n","import jsqr, { QRCode } from 'jsqr';\n\nexport function detectQRCodeFromVideo({video, canvas}: {video: HTMLVideoElement | null, canvas: HTMLCanvasElement | null}): QRCode | null {\n    if (!canvas) return null;\n    if (!video) return null;\n    const stream = video.srcObject;\n    if (!stream) return null;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return null;\n    ctx.drawImage(video, 0, 0, video.width, video.height);\n    const img = ctx.getImageData(0, 0, video.width, video.height);\n    return jsqr(img.data, video.width, video.height);\n}\n","\nexport interface IBingoSlotConfig {\n    value: string;\n    label: string;\n    description?: string;\n    imageURL?: string;\n}\n\nexport default class BingoSlot {\n    constructor(\n        public value: string,\n        public label: string,\n        public description: string = \"\",\n        public imageURL: string = \"\",\n        public position: {\n            x: number,\n            y: number\n        } = { x: 0, y: 0 },\n        public punched: boolean = false\n    ) {}\n}","import BingoSlot, { IBingoSlotConfig } from './slot';\n\nexport interface IBingoConfig {\n    sheet: {\n        width: number;\n        height: number;\n    };\n    slot: {\n        variations: IBingoSlotConfig[];\n    }\n}\n\nexport default class BingoSheet {\n\n    public length: number;\n\n    constructor(\n        public width: number,\n        public height: number,\n        public slots: BingoSlot[][]\n    ) {\n        this.length = width * height;\n    }\n\n    private static arrayShuffle<T>(arr: T[]): T[] {\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    }\n\n    private static getShuffledListWithLength(arr: IBingoSlotConfig[], length: number): IBingoSlotConfig[] {\n        const dest: IBingoSlotConfig[] = [];\n        while (dest.length < length) {\n            dest.push(...this.arrayShuffle<IBingoSlotConfig>(arr))\n        }\n        return dest;\n    }\n\n    private static createSlot(variation: IBingoSlotConfig, index: number, width: number): BingoSlot {\n        const { value, label, description, imageURL } = variation;\n        const [x, y] = [index % width, Math.floor(index / width)];\n        return new BingoSlot(value, label, description, imageURL, { x, y });\n    }\n\n    static create(config: IBingoConfig): BingoSheet {\n        const {width, height} = config.sheet;\n        const slots: BingoSlot[][] = Array(height).fill(true).map(() => []);\n        const length = width * height;\n        this.getShuffledListWithLength(config.slot.variations, length).map((v, i) => {\n            const slot = this.createSlot(v, i, width);\n            return slots[slot.position.y].push(slot);\n        });\n        return new BingoSheet(config.sheet.width, config.sheet.height, slots);\n    }\n\n}","import React, { useState } from 'react';\nimport './App.css';\n\nimport BingoSheetView from './components/BingoSheetView';\nimport Scanner from './components/Scanner';\nimport DebugLog from './debug/DebugLog';\n\nimport config from './config.json';\nimport BingoSheet from './models/sheet';\n\nconst LogListItemView: React.FC<{log: DebugLog}> = ({log}) => {\n  return (\n    <li>{JSON.stringify(log)}</li>\n  );\n}\n\nconst App: React.FC = () => {\n\n  // TODO: Make \"sheet\" persistent, by chomex\n  const sheet = BingoSheet.create(config.bingo);\n\n  const [logs, setLog] = useState([] as DebugLog[]);\n  const pushLog = (log: DebugLog) => setLog(logs.concat(log));\n\n  return (\n    <div className=\"App\">\n      <Scanner pushLog={pushLog} />\n      <div>\n        <ul>{logs.reverse().map(log => <LogListItemView key={log.timestamp} log={log} />)}</ul>\n      </div>\n      <BingoSheetView sheet={sheet} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}