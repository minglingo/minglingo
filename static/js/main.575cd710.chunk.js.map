{"version":3,"sources":["components/GameMenu/refresh.svg","components/Detector/camera.svg","components/BingoSheetView/index.tsx","models/slot.ts","models/sheet.ts","context/BingoSheet.ts","components/GameMenu/index.tsx","components/Detector/VideoScan/VideoScanView.tsx","services/Detector.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BingoSheetCell","slot","className","cn","punched","bingo","label","split","map","line","i","key","BingoSheetRow","row","BingoSheetView","sheet","isBingo","slots","BingoSlot","value","description","imageURL","position","x","y","BingoSheet","width","height","length","initialized","this","Date","payload","flat","find","hit","filter","getBingo","concat","getHorizontalBingo","getVerticalBingo","getDiagonalBingo","markSlotsIfBingo","every","col","len","Math","min","backslash","slash","arr","j","floor","random","dest","push","arrayShuffle","variation","index","config","Array","fill","getShuffledListWithLength","variations","v","createSlot","BingoSheetContext","createContext","create","punch","data","scanning","startScanning","stopScanning","GameMenu","app","reset","name","toLocaleString","src","refresh","alt","onClick","constraints","audio","video","facingMode","test","navigator","userAgent","exact","VideoScanView","detectorInterval","vref","createRef","canvas","document","createElement","detect","qrcode","srcObject","ctx","getContext","drawImage","img","getImageData","jsqr","detectQRCodeFromVideo","clearInterval","pause","JSON","parse","startVideoScanning","a","current","play","setAttribute","mediaDevices","getUserMedia","stream","setInterval","ref","autoPlay","playsInline","camera","Content","Consumer","application","App","useState","setScanState","updateBingo","context","Provider","window","confirm","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.575cd710.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh.8be2e2b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/camera.2723d63e.svg\";","import React from 'react';\n\nimport cn from 'classnames';\n\nimport BingoSheet from \"../../models/sheet\";\nimport BingoSlot from '../../models/slot';\nimport './index.scss';\n\nconst BingoSheetCell: React.FC<{slot: BingoSlot}> = ({slot}) => {\n    return (\n        <div className={cn(\"sheet-cell\", { punched: slot.punched, bingo: slot.bingo })}>\n            {slot.label.split(\"\\n\").map((line, i) => <div key={i}>{line}</div>)}\n        </div>\n    );\n};\n\nconst BingoSheetRow: React.FC<{row: BingoSlot[]}> = ({row}) => {\n    return (\n        <div className=\"sheet-row\">\n            {row.map((slot, i) => <BingoSheetCell key={i} slot={slot} />)}\n        </div>\n    );\n};\n\nconst BingoSheetView: React.FC<{sheet: BingoSheet}> = ({sheet}) => {\n    return (\n        <div className={cn(\"sheet-wrapper\", { bingo: sheet.isBingo() })}>\n            {sheet.slots.map((row, i) => <BingoSheetRow key={i} row={row} />)}\n        </div>\n    );\n};\n\nexport default BingoSheetView;\n","\nexport interface IBingoSlotConfig {\n    value: string;\n    label: string;\n    description?: string;\n    imageURL?: string;\n}\n\nexport default class BingoSlot {\n    constructor(\n        public value: string,\n        public label: string,\n        public description: string = \"\",\n        public imageURL: string = \"\",\n        public position: {\n            x: number,\n            y: number\n        } = { x: 0, y: 0 },\n        public punched: boolean = false,\n        public bingo: boolean = false,\n    ) {}\n}","import BingoSlot, { IBingoSlotConfig } from './slot';\nimport { Payload } from './qrcode';\n\nexport interface IBingoConfig {\n    sheet: {\n        width: number;\n        height: number;\n    };\n    slot: {\n        variations: IBingoSlotConfig[];\n    }\n}\n\nexport default class BingoSheet {\n\n    public length: number;\n    public initialized: Date;\n\n    constructor(\n        public width: number,\n        public height: number,\n        public slots: BingoSlot[][]\n    ) {\n        this.length = width * height;\n        this.initialized = new Date();\n    }\n\n    private static arrayShuffle<T>(arr: T[]): T[] {\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    }\n\n    private static getShuffledListWithLength(arr: IBingoSlotConfig[], length: number): IBingoSlotConfig[] {\n        const dest: IBingoSlotConfig[] = [];\n        while (dest.length < length) {\n            dest.push(...this.arrayShuffle<IBingoSlotConfig>(arr))\n        }\n        return dest;\n    }\n\n    private static createSlot(variation: IBingoSlotConfig, index: number, width: number): BingoSlot {\n        const { value, label, description, imageURL } = variation;\n        const [x, y] = [index % width, Math.floor(index / width)];\n        return new BingoSlot(value, label, description, imageURL, { x, y });\n    }\n\n    static create(config: IBingoConfig): BingoSheet {\n        const {width, height} = config.sheet;\n        const slots: BingoSlot[][] = Array(height).fill(true).map(() => []);\n        const length = width * height;\n        this.getShuffledListWithLength(config.slot.variations, length).map((v, i) => {\n            const slot = this.createSlot(v, i, width);\n            return slots[slot.position.y].push(slot);\n        });\n        return new BingoSheet(config.sheet.width, config.sheet.height, slots);\n    }\n\n    /**\n     * hit returns the slot which matches the given payload,\n     * or undefined if not found.\n     * @param payload\n     */\n    public hit(payload: Payload): BingoSlot | void {\n        // eslint-disable-next-line\n        return this.slots.flat().find((slot) => slot.value === payload.value);\n    }\n\n    /**\n     * punch marks the given hit slot as punched.\n     * @param hit\n     */\n    public punch(hit: BingoSlot): BingoSheet {\n        // eslint-disable-next-line\n        this.slots.flat().filter((slot) => slot.value === hit.value).map((slot) => {\n            // slot.punched = true;\n            const {x, y} = slot.position;\n            this.slots[y][x].punched = true;\n        });\n        return this;\n    }\n\n    public isBingo(): boolean {\n        return this.getBingo().length !== 0;\n    }\n\n    public getBingo(): BingoSlot[] {\n        let bingo: BingoSlot[] = [];\n        bingo = bingo.concat(this.getHorizontalBingo());\n        bingo = bingo.concat(this.getVerticalBingo());\n        bingo = bingo.concat(this.getDiagonalBingo());\n        this.markSlotsIfBingo(bingo);\n        return bingo;\n    }\n\n    private markSlotsIfBingo(bingo: BingoSlot[]) {\n        bingo.map((slot) => this.slots[slot.position.y][slot.position.x].bingo = true);\n    }\n\n    /**\n     * Return all the slots which constitute the horizontal bingo.\n     */\n    public getHorizontalBingo(): BingoSlot[] {\n        for (let row = 0; row < this.height; row++) {\n            if (this.slots[row].every((slot) => slot.punched)) {\n                return this.slots[row];\n            }\n        }\n        return [];\n    }\n\n    /**\n     * Return all the slots which constitute the vertical bingo.\n     */\n    public getVerticalBingo(): BingoSlot[] {\n        for (let col = 0; col < this.width; col++) {\n            if (this.slots.every((row) => row[col].punched)) {\n                return this.slots.map((row) => row[col]).flat();\n            }\n        }\n        return [];\n    }\n\n    /**\n     * Return all the slots which constitute the diagonal bingo.\n     */\n    public getDiagonalBingo(): BingoSlot[] {\n        let bingo: BingoSlot[] = [];\n        if (this.width === this.height) {\n            const len = Math.min(this.width, this.height);\n            const backslash = this.slots.map((row, i) => row[i]);\n            if (backslash.every(slot => slot.punched)) {\n                bingo = bingo.concat(backslash);\n            }\n            const slash = this.slots.map((row, i) => row[len - i - 1]);\n            if (slash.every(slot => slot.punched)) {\n                bingo = bingo.concat(slash);\n            }\n        } else {\n            // TODO: Consider NON-SQUARE bingo sheet.\n            return [];\n        }\n        return bingo;\n    }\n}","import { createContext } from \"react\";\nimport BingoSheet from \"../models/sheet\";\nimport config from \"../config.json\";\nimport { QRCodeData } from \"../models/qrcode\";\n\nconst BingoSheetContext = createContext({\n    bingo: {\n        sheet: BingoSheet.create(config.bingo),\n    },\n    punch(data: QRCodeData) {},\n    scanning: false,\n    startScanning() {},\n    stopScanning() {},\n});\n\nexport default BingoSheetContext;\n","import React from 'react';\nimport BingoSheet from '../../models/sheet';\n\nimport refresh from './refresh.svg';\nimport './index.scss';\n\nconst GameMenu: React.FC<{ app: { name: string }, sheet: BingoSheet, reset: () => void, }> = ({ app, sheet, reset, }) => {\n    return (\n        <div className=\"game-menu\">\n            <h1>{app.name}</h1>\n            <span className=\"start-time\">\n                {sheet.initialized.toLocaleString()}\n            </span>\n            <img src={refresh} alt=\"Restart Game\" onClick={reset} />\n        </div>\n    );\n};\n\nexport default GameMenu;","import React, { createRef } from 'react';\nimport \"./VideoScanView.scss\";\n\nimport camera from \"../camera.svg\";\nimport { detectQRCodeFromVideo } from '../../../services/Detector';\nimport { QRCodeData } from '../../../models/qrcode';\n\nconst [vw, vh] = [80, 80];\n\n// TODO: Use rear camera.\nconst isMobile = /(iPhone|iPad|iPod|Android)/i.test(navigator.userAgent);\nconst facingMode =  isMobile ? { exact: 'environment' } : 'user';\nconst constraints = { audio: false, video: { width: vw, height: vh, facingMode } };\n\nconst VideoScanView: React.FC<{ punch(data: QRCodeData): void }> = ({ punch }) => {\n    const vref = createRef<HTMLVideoElement>();\n    const canvas = document.createElement('canvas');\n    canvas.width = vw; canvas.height = vh;\n    let detectorInterval: NodeJS.Timeout;\n    const detect = (video: HTMLVideoElement) => {\n        const qrcode = detectQRCodeFromVideo({ video, canvas })\n        if (!qrcode) return;\n        clearInterval(detectorInterval);\n        video.pause();\n        punch(JSON.parse(qrcode.data));\n    };\n    const startVideoScanning = async () => {\n        if (!vref.current) return;\n        vref.current.play();\n        vref.current.setAttribute('muted', '');\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        vref.current.srcObject = stream;\n        detectorInterval = setInterval(() => detect(vref.current as HTMLVideoElement), 1000);\n    };\n    return (\n        <div className=\"video-capture-container\">\n            <div>\n                <video ref={vref} autoPlay playsInline width={vw} height={vh} />\n            </div>\n            <div onClick={startVideoScanning}>\n                <img src={camera} alt=\"Star Scanning QR\" />\n            </div>\n        </div>\n    );\n};\n\nexport default VideoScanView;\n","import jsqr, { QRCode } from 'jsqr';\n\nexport function detectQRCodeFromVideo({video, canvas}: {video: HTMLVideoElement | null, canvas: HTMLCanvasElement | null}): QRCode | null {\n    if (!canvas) return null;\n    if (!video) return null;\n    const stream = video.srcObject;\n    if (!stream) return null;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return null;\n    ctx.drawImage(video, 0, 0, video.width, video.height);\n    const img = ctx.getImageData(0, 0, video.width, video.height);\n    return jsqr(img.data, video.width, video.height);\n}\n\nexport function detectQRCodeFromImageURL(imageURL: string): Promise<QRCode | null> {\n    return new Promise((resolve) => {\n        const img = new Image();\n        img.src = imageURL;\n        img.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            [canvas.width, canvas.height] = [img.width, img.height];\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) return;\n            ctx.drawImage(img, 0, 0);\n            const qrcode = jsqr(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height);\n            resolve(qrcode);\n        };\n    });\n}","import React, { useState } from 'react';\nimport './App.scss';\n\nimport BingoSheetView from './components/BingoSheetView';\n\nimport BingoSheet from \"./models/sheet\";\nimport config from \"./config.json\";\n\nimport BingoSheetContext from './context/BingoSheet';\nimport { QRCodeData } from './models/qrcode';\nimport GameMenu from './components/GameMenu';\nimport VideoScanView from './components/Detector/VideoScan/VideoScanView';\n\nconst Content: React.FC<{ reset: () => void, }> = ({ reset, }) => {\n  return (\n    <BingoSheetContext.Consumer>\n      {({bingo, punch}) => <div className=\"App\">\n        <GameMenu app={config.application} sheet={bingo.sheet} reset={reset} />\n        <BingoSheetView sheet={bingo.sheet} />\n        <VideoScanView punch={punch} />\n      </div>\n      }\n    </BingoSheetContext.Consumer>\n  );\n};\n\nconst App: React.FC = () => {\n\n  const [scanning, setScanState] = useState(false);\n  const startScanning = () => setScanState(true);\n  const stopScanning = () => setScanState(false);\n\n  const [bingo, updateBingo] = useState({sheet: BingoSheet.create(config.bingo)});\n  const punch = (data: QRCodeData) => {\n    const slot = bingo.sheet.hit(data.payload);\n    if (!slot) return; // TODO: do something\n    updateBingo({ sheet: bingo.sheet.punch(slot) });\n  };\n  const reset = () => {\n    if (!window.confirm(\"Are you sure to delete current progress and start new game?\")) return;\n    updateBingo({ sheet: BingoSheet.create(config.bingo) });\n  };\n\n  const context = {\n    bingo, punch,\n    scanning, startScanning, stopScanning,\n  };\n\n  return (\n    <BingoSheetContext.Provider value={context}>\n      <Content reset={reset} />\n    </BingoSheetContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}